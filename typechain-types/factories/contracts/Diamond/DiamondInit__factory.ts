/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DiamondInit,
  DiamondInitInterface,
} from "../../../contracts/Diamond/DiamondInit";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "cap",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_isin",
        type: "string",
      },
      {
        internalType: "string",
        name: "_instrumentType",
        type: "string",
      },
      {
        internalType: "string",
        name: "_jurisdiction",
        type: "string",
      },
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610d2a8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063839cb5ec14610030575b600080fd5b61004a60048036038101906100459190610860565b61004c565b005b610060679314250beb7a4af060c01b6105ee565b61007467650ec9dba25ef7b560c01b6105ee565b61008867d3e21f19222e41d460c01b6105ee565b61009c6782f173e272c3687360c01b6105ee565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361010b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610102906109eb565b60405180910390fd5b61011f6784888cfc912e7c2b60c01b6105ee565b61013367e5cee484830d44e660c01b6105ee565b610146660b912d2d6fa40560c01b6105ee565b60006101506105f1565b9050610166676c7344af310132a160c01b6105ee565b878160030190816101779190610c22565b5061018c676f7da9ff14fb1d6760c01b6105ee565b8681600401908161019d9190610c22565b506101b267489c5e677ff869ae60c01b6105ee565b60128160050160006101000a81548160ff021916908360ff1602179055506101e4677c16416fd48a7dac60c01b6105ee565b858160060181905550610201674a281cf8724e195b60c01b6105ee565b8481600a0190816102129190610c22565b5061022767f0093270ecc3297d60c01b6105ee565b8381600b0190816102389190610c22565b5061024d67a0b5b75a66071adb60c01b6105ee565b8281600c01908161025e9190610c22565b5061027367a6e41b4649bf9ea460c01b6105ee565b6000801b8160140181905550610293676966194f82fb3b2460c01b6105ee565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581601101819055506102d0672e5f01a0103315d760c01b6105ee565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6816012018190555061030d679f4a595a0834d44260c01b6105ee565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a816013018190555061034a67132df7cd5abfa50060c01b6105ee565b60018160080160008360140154815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506103cd67d001616158832ff260c01b6105ee565b60018160080160008360110154815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610450674ae1c73e743c911f60c01b6105ee565b60018160080160008360120154815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506104d367883c317a43a571b560c01b6105ee565b60018160080160008360130154815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061055667ba2d6be3641dbe7a60c01b6105ee565b8060140154816009016000836011015481526020019081526020016000208190555061058c67b57c68244f706ee060c01b6105ee565b806011015481600901600083601201548152602001908152602001600020819055506105c267eb450a122bf26c8660c01b6105ee565b806011015481600901600083601301548152602001908152602001600020819055505050505050505050565b50565b60006106076792eaf2beeba3ab3960c01b61066f565b61061b6796a737f6b340010d60c01b61066f565b61062f67401d534f7425dfa560c01b61066f565b60007f4913ddf4c966b457f5d50f87a47c411d66b61feacb08ac6bcb434154c81c5c9c905061066867167ef6c9e8f9cbbb60c01b61066f565b8091505090565b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106d982610690565b810181811067ffffffffffffffff821117156106f8576106f76106a1565b5b80604052505050565b600061070b610672565b905061071782826106d0565b919050565b600067ffffffffffffffff821115610737576107366106a1565b5b61074082610690565b9050602081019050919050565b82818337600083830152505050565b600061076f61076a8461071c565b610701565b90508281526020810184848401111561078b5761078a61068b565b5b61079684828561074d565b509392505050565b600082601f8301126107b3576107b2610686565b5b81356107c384826020860161075c565b91505092915050565b6000819050919050565b6107df816107cc565b81146107ea57600080fd5b50565b6000813590506107fc816107d6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082d82610802565b9050919050565b61083d81610822565b811461084857600080fd5b50565b60008135905061085a81610834565b92915050565b600080600080600080600060e0888a03121561087f5761087e61067c565b5b600088013567ffffffffffffffff81111561089d5761089c610681565b5b6108a98a828b0161079e565b975050602088013567ffffffffffffffff8111156108ca576108c9610681565b5b6108d68a828b0161079e565b96505060406108e78a828b016107ed565b955050606088013567ffffffffffffffff81111561090857610907610681565b5b6109148a828b0161079e565b945050608088013567ffffffffffffffff81111561093557610934610681565b5b6109418a828b0161079e565b93505060a088013567ffffffffffffffff81111561096257610961610681565b5b61096e8a828b0161079e565b92505060c061097f8a828b0161084b565b91505092959891949750929550565b600082825260208201905092915050565b7f41646d696e20616464726573732063616e6e6f74206265207a65726f00000000600082015250565b60006109d5601c8361098e565b91506109e08261099f565b602082019050919050565b60006020820190508181036000830152610a04816109c8565b9050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610a5d57607f821691505b602082108103610a7057610a6f610a16565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610ad87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610a9b565b610ae28683610a9b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610b1f610b1a610b15846107cc565b610afa565b6107cc565b9050919050565b6000819050919050565b610b3983610b04565b610b4d610b4582610b26565b848454610aa8565b825550505050565b600090565b610b62610b55565b610b6d818484610b30565b505050565b5b81811015610b9157610b86600082610b5a565b600181019050610b73565b5050565b601f821115610bd657610ba781610a76565b610bb084610a8b565b81016020851015610bbf578190505b610bd3610bcb85610a8b565b830182610b72565b50505b505050565b600082821c905092915050565b6000610bf960001984600802610bdb565b1980831691505092915050565b6000610c128383610be8565b9150826002028217905092915050565b610c2b82610a0b565b67ffffffffffffffff811115610c4457610c436106a1565b5b610c4e8254610a45565b610c59828285610b95565b600060209050601f831160018114610c8c5760008415610c7a578287015190505b610c848582610c06565b865550610cec565b601f198416610c9a86610a76565b60005b82811015610cc257848901518255600182019150602085019450602081019050610c9d565b86831015610cdf5784890151610cdb601f891682610be8565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220cd69952335f6e9c8fe5d819034998f29b54c984ea1d786bc994558f09f59c4fe64736f6c634300081c0033";

type DiamondInitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondInitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondInit__factory extends ContractFactory {
  constructor(...args: DiamondInitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DiamondInit & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DiamondInit__factory {
    return super.connect(runner) as DiamondInit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondInitInterface {
    return new Interface(_abi) as DiamondInitInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DiamondInit {
    return new Contract(address, _abi, runner) as unknown as DiamondInit;
  }
}
