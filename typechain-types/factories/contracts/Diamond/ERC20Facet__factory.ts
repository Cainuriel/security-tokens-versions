/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ERC20Facet,
  ERC20FacetInterface,
} from "../../../contracts/Diamond/ERC20Facet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50611edc8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806306fdde0314610088578063095ea7b3146100a657806318160ddd146100d657806323b872dd146100f4578063313ce5671461012457806370a082311461014257806395d89b4114610172578063a9059cbb14610190578063dd62ed3e146101c0575b600080fd5b6100906101f0565b60405161009d9190611647565b60405180910390f35b6100c060048036038101906100bb9190611702565b6102c7565b6040516100cd919061175d565b60405180910390f35b6100de610342565b6040516100eb9190611787565b60405180910390f35b61010e600480360381019061010991906117a2565b610391565b60405161011b919061175d565b60405180910390f35b61012c6105bf565b6040516101399190611811565b60405180910390f35b61015c6004803603810190610157919061182c565b61061b565b6040516101699190611787565b60405180910390f35b61017a6106a9565b6040516101879190611647565b60405180910390f35b6101aa60048036038101906101a59190611702565b610780565b6040516101b7919061175d565b60405180910390f35b6101da60048036038101906101d59190611859565b6107fb565b6040516101e79190611787565b60405180910390f35b606061020667ceac5fecc9eb907f60c01b6108c6565b61021a677f53fd356075748c60c01b6108c6565b61022e67d2da89b9791a253960c01b6108c6565b6102366108c9565b6003018054610244906118c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610270906118c8565b80156102bd5780601f10610292576101008083540402835291602001916102bd565b820191906000526020600020905b8154815290600101906020018083116102a057829003601f168201915b5050505050905090565b60006102dd679fd3067388c684f960c01b6108c6565b6102f167201fffae00ea717b60c01b6108c6565b610305673f06990e363937b160c01b6108c6565b610310338484610947565b61032467374ead058f690e2360c01b6108c6565b61033867ebd78fb268cb14a560c01b6108c6565b6001905092915050565b6000610358671367ea9fea844a3a60c01b6108c6565b61036c675d31e2eb75d8024060c01b6108c6565b610380679fac73ffb48a672c60c01b6108c6565b6103886108c9565b60020154905090565b60006103a767fe9b5dfc2a92adb960c01b6108c6565b6103bb67ab70c091ad96bafa60c01b6108c6565b6103cf67dea3faf6b27783c160c01b6108c6565b60006103d96108c9565b90506103ef671587fbb7c22a816f60c01b6108c6565b6104036722250dfdfe66144d60c01b6108c6565b60008160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061049a67f4778ce15da5c73960c01b6108c6565b6104ae67443911954d7737d660c01b6108c6565b6104c26743a83f31ca16052360c01b6108c6565b83811015610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc90611945565b60405180910390fd5b6105196749d80504c098ac3260c01b6108c6565b61052d677532c79ceffee5f260c01b6108c6565b61054167071f84791a872e8260c01b6108c6565b61054c868686610c09565b61056067d2408a5de123b09460c01b6108c6565b61057467330665297925694760c01b6108c6565b61058a863386846105859190611994565b610947565b61059e67a372cef257d795a060c01b6108c6565b6105b267ca90c45c5a25c06760c01b6108c6565b6001925050509392505050565b60006105d5673cf8f4a5981cadfe60c01b6108c6565b6105e967ce356619ba7e01ee60c01b6108c6565b6105fd673a3e65de2a49ab7860c01b6108c6565b6106056108c9565b60050160009054906101000a900460ff16905090565b600061063167ba88bb8c8db8a95260c01b6108c6565b610645672e90720c158eba1860c01b6108c6565b6106596710b3fdfd7bc6659060c01b6108c6565b6106616108c9565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606106bf676496ac0dc38d6cfe60c01b6108c6565b6106d367c19f2fed5227559660c01b6108c6565b6106e767fad1103bc4ce4d3b60c01b6108c6565b6106ef6108c9565b60040180546106fd906118c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610729906118c8565b80156107765780601f1061074b57610100808354040283529160200191610776565b820191906000526020600020905b81548152906001019060200180831161075957829003601f168201915b5050505050905090565b60006107966758932b93aefad49660c01b6108c6565b6107aa67cc74fba4731773b460c01b6108c6565b6107be6741aca1e632d0673460c01b6108c6565b6107c9338484610c09565b6107dd67b56fc6305eb03e1c60c01b6108c6565b6107f167b8b419acb662e6e360c01b6108c6565b6001905092915050565b60006108116792908d59bfcdb04660c01b6108c6565b61082567eb4b910014b9f20460c01b6108c6565b61083866f3409cf9cf926760c01b6108c6565b6108406108c9565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b50565b60006108df6792eaf2beeba3ab3960c01b6115b4565b6108f36796a737f6b340010d60c01b6115b4565b61090767401d534f7425dfa560c01b6115b4565b60007f4913ddf4c966b457f5d50f87a47c411d66b61feacb08ac6bcb434154c81c5c9c905061094067167ef6c9e8f9cbbb60c01b6115b4565b8091505090565b61095b67e4c1b1c1361c676860c01b6108c6565b61096f67c457152d0546a57d60c01b6108c6565b6109836752e5de46f2bb2a4160c01b6108c6565b61099767c65da9818b2abcf260c01b6108c6565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fd90611a14565b60405180910390fd5b610a1a672c94e22e6c7819e060c01b6108c6565b610a2e67dd50fc6db1b229b160c01b6108c6565b610a4267493332b3d8d0254960c01b6108c6565b610a5667f2344536145a262360c01b6108c6565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ac5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abc90611a80565b60405180910390fd5b610ad967a18b8ccd51a6139260c01b6108c6565b610aed67b9b5b2f20cc13b0a60c01b6108c6565b80610af66108c9565b60010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b8b676120f04ee000c05060c01b6108c6565b610b9f6786121d53a2e27b4d60c01b6108c6565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610bfc9190611787565b60405180910390a3505050565b610c1d6723809b67ce0a83d360c01b6108c6565b610c31679a116bac2e629df160c01b6108c6565b610c4567fb9cbe4ca413fd3e60c01b6108c6565b610c5967a48596c85d1185e560c01b6108c6565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbf90611b12565b60405180910390fd5b610cdc67a5cae04950a6b35160c01b6108c6565b610cf06772fb99b8154eb94660c01b6108c6565b610d0467ef5733c54f025d3c60c01b6108c6565b610d1867c2f02829becdc3e860c01b6108c6565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7e90611b7e565b60405180910390fd5b610d9b6715b38b6fd201e83b60c01b6108c6565b610daf6796b7b07e9b6c25cb60c01b6108c6565b610dc3675b38538174cda47860c01b6108c6565b6000610dcd6108c9565b9050610de367f82f07291091f1c660c01b6108c6565b610df767d6a8144d2688a68c60c01b6108c6565b610e0b67eab90fc6f33301d060c01b6108c6565b8060070160009054906101000a900460ff1615610e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5490611c10565b60405180910390fd5b610e716745efdebcb8afa42760c01b6108c6565b610e856711621c9cf04a728460c01b6108c6565b610e996715d7640473f256a860c01b6108c6565b610ead67e52d05f86f02a55c60c01b6108c6565b80600d0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3290611c7c565b60405180910390fd5b610f4f677ac3871ed000a58d60c01b6108c6565b610f636780a94402a69ac57460c01b6108c6565b610f77678a8d49267908413060c01b6108c6565b610f8b67913264f58bd18b9260c01b6108c6565b80600e0160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561101a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101190611ce8565b60405180910390fd5b61102e67e21a80c0f060e85d60c01b6108c6565b61104267674673e0c2703c2360c01b6108c6565b6110566741afa9d5ad443ac660c01b6108c6565b61106a67e35d36190c30f38860c01b6108c6565b80600d0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166110f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ef90611d54565b60405180910390fd5b61110c67cb0f65d6ea3ad4e260c01b6108c6565b611120678e2ba73e7aa21d0860c01b6108c6565b611134679e6161c101cd657b60c01b6108c6565b6111486723f57eaa66d67dec60c01b6108c6565b80600e0160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156111d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ce90611dc0565b60405180910390fd5b6111eb674e93830257e37fda60c01b6108c6565b6111ff67d4bbc25dbc4a86e860c01b6108c6565b611213671934e65c6dc8ccef60c01b6108c6565b60008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061126d6794d3a26c7f85926d60c01b6108c6565b611281672e050cf3124a560a60c01b6108c6565b61129567bfa486bef2bd4bba60c01b6108c6565b828110156112d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cf90611e52565b60405180910390fd5b6112ec6735f80d823056e7c460c01b6108c6565b611300672f045005be48dec360c01b6108c6565b828161130c9190611994565b8260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611365677bad2c8080f3939f60c01b6108c6565b828260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113b69190611e72565b925050819055506113d16781c214992f74bad560c01b6108c6565b60018260100160008282546113e69190611e72565b9250508190555061140167dd4013be92b1764f60c01b6108c6565b6040518060a00160405280836010015481526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020014281525082600f016000846010015481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040155905050611534675493b7edaca1130f60c01b6108c6565b61154867c545dca95031ea4160c01b6108c6565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516115a59190611787565b60405180910390a35050505050565b50565b600081519050919050565b600082825260208201905092915050565b60005b838110156115f15780820151818401526020810190506115d6565b60008484015250505050565b6000601f19601f8301169050919050565b6000611619826115b7565b61162381856115c2565b93506116338185602086016115d3565b61163c816115fd565b840191505092915050565b60006020820190508181036000830152611661818461160e565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116998261166e565b9050919050565b6116a98161168e565b81146116b457600080fd5b50565b6000813590506116c6816116a0565b92915050565b6000819050919050565b6116df816116cc565b81146116ea57600080fd5b50565b6000813590506116fc816116d6565b92915050565b6000806040838503121561171957611718611669565b5b6000611727858286016116b7565b9250506020611738858286016116ed565b9150509250929050565b60008115159050919050565b61175781611742565b82525050565b6000602082019050611772600083018461174e565b92915050565b611781816116cc565b82525050565b600060208201905061179c6000830184611778565b92915050565b6000806000606084860312156117bb576117ba611669565b5b60006117c9868287016116b7565b93505060206117da868287016116b7565b92505060406117eb868287016116ed565b9150509250925092565b600060ff82169050919050565b61180b816117f5565b82525050565b60006020820190506118266000830184611802565b92915050565b60006020828403121561184257611841611669565b5b6000611850848285016116b7565b91505092915050565b600080604083850312156118705761186f611669565b5b600061187e858286016116b7565b925050602061188f858286016116b7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806118e057607f821691505b6020821081036118f3576118f2611899565b5b50919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061192f601d836115c2565b915061193a826118f9565b602082019050919050565b6000602082019050818103600083015261195e81611922565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061199f826116cc565b91506119aa836116cc565b92508282039050818111156119c2576119c1611965565b5b92915050565b7f45524332303a20617070726f76652066726f6d207a65726f2061646472657373600082015250565b60006119fe6020836115c2565b9150611a09826119c8565b602082019050919050565b60006020820190508181036000830152611a2d816119f1565b9050919050565b7f45524332303a20617070726f766520746f207a65726f20616464726573730000600082015250565b6000611a6a601e836115c2565b9150611a7582611a34565b602082019050919050565b60006020820190508181036000830152611a9981611a5d565b9050919050565b7f45524332303a207472616e736665722066726f6d207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611afc6021836115c2565b9150611b0782611aa0565b604082019050919050565b60006020820190508181036000830152611b2b81611aef565b9050919050565b7f45524332303a207472616e7366657220746f207a65726f206164647265737300600082015250565b6000611b68601f836115c2565b9150611b7382611b32565b602082019050919050565b60006020820190508181036000830152611b9781611b5b565b9050919050565b7f45524332305061757361626c653a20746f6b656e207472616e7366657220776860008201527f696c652070617573656400000000000000000000000000000000000000000000602082015250565b6000611bfa602a836115c2565b9150611c0582611b9e565b604082019050919050565b60006020820190508181036000830152611c2981611bed565b9050919050565b7f53656e646572206973206e6f742077686974656c697374656400000000000000600082015250565b6000611c666019836115c2565b9150611c7182611c30565b602082019050919050565b60006020820190508181036000830152611c9581611c59565b9050919050565b7f53656e64657220697320626c61636b6c69737465640000000000000000000000600082015250565b6000611cd26015836115c2565b9150611cdd82611c9c565b602082019050919050565b60006020820190508181036000830152611d0181611cc5565b9050919050565b7f526563697069656e74206973206e6f742077686974656c697374656400000000600082015250565b6000611d3e601c836115c2565b9150611d4982611d08565b602082019050919050565b60006020820190508181036000830152611d6d81611d31565b9050919050565b7f526563697069656e7420697320626c61636b6c69737465640000000000000000600082015250565b6000611daa6018836115c2565b9150611db582611d74565b602082019050919050565b60006020820190508181036000830152611dd981611d9d565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611e3c6026836115c2565b9150611e4782611de0565b604082019050919050565b60006020820190508181036000830152611e6b81611e2f565b9050919050565b6000611e7d826116cc565b9150611e88836116cc565b9250828201905080821115611ea057611e9f611965565b5b9291505056fea26469706673582212201ea6e5a3b8d3df2df87db96cf7f033343e93d02454a3b3a9f096f989787c11fd64736f6c634300081c0033";

type ERC20FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Facet__factory extends ContractFactory {
  constructor(...args: ERC20FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC20Facet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Facet__factory {
    return super.connect(runner) as ERC20Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20FacetInterface {
    return new Interface(_abi) as ERC20FacetInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20Facet {
    return new Contract(address, _abi, runner) as unknown as ERC20Facet;
  }
}
