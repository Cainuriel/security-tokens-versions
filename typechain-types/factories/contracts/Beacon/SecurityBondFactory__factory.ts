/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SecurityBondFactory,
  SecurityBondFactoryInterface,
} from "../../../contracts/Beacon/SecurityBondFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_beacon",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "bondProxy",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "BondCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "beacon",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "createBond",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "deployedBonds",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "indexOfDeployedBonds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalOfBondsCreated",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "totalOfBondsCreatedByBeneficiary",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161191c38038061191c83398181016040528101906100329190610324565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c9190610360565b60405180910390fd5b6100b4816101fa60201b60201c565b506100cf675d213f880df7e1fa60c01b6102be60201b60201c565b6100e967a2fa9af100d70a1460c01b6102be60201b60201c565b61010367e9b5268c61254af860c01b6102be60201b60201c565b61011d67a3fc132009b7f42e60c01b6102be60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361018c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610183906103d8565b60405180910390fd5b6101a667e452090ef2e0a37660c01b6102be60201b60201c565b6101c067c7569ae038318e8a60c01b6102be60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506103f8565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102f1826102c6565b9050919050565b610301816102e6565b811461030c57600080fd5b50565b60008151905061031e816102f8565b92915050565b60006020828403121561033a576103396102c1565b5b60006103488482850161030f565b91505092915050565b61035a816102e6565b82525050565b60006020820190506103756000830184610351565b92915050565b600082825260208201905092915050565b7f426561636f6e20616464726573732063616e6e6f74206265207a65726f000000600082015250565b60006103c2601d8361037b565b91506103cd8261038c565b602082019050919050565b600060208201905081810360008301526103f1816103b5565b9050919050565b60805161150261041a6000396000818161023a01526104d001526115026000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c8063010e4f53146100885780632e96d6f9146100b857806359659e90146100e85780636264ccc5146101065780636459164f14610124578063715018a61461015457806374c4228f1461015e5780638da5cb5b1461018e578063f2fde38b146101ac575b600080fd5b6100a2600480360381019061009d9190610906565b6101c8565b6040516100af9190610971565b60405180910390f35b6100d260048036038101906100cd91906109c2565b61049b565b6040516100df9190610971565b60405180910390f35b6100f06104ce565b6040516100fd9190610971565b60405180910390f35b61010e6104f2565b60405161011b91906109fe565b60405180910390f35b61013e60048036038101906101399190610a19565b6104f8565b60405161014b91906109fe565b60405180910390f35b61015c610510565b005b61017860048036038101906101739190610a19565b610524565b60405161018591906109fe565b60405180910390f35b61019661053c565b6040516101a39190610971565b60405180910390f35b6101c660048036038101906101c19190610a19565b610565565b005b60006101de6767fdea1cd1a653ab60c01b6105eb565b6101e66105ee565b6101fa67c1b2b97332c5b7a260c01b6105eb565b61020e678f1db09e4370368260c01b6105eb565b61022267ca08c2fc0fecd7f960c01b6105eb565b6102366710d0f95c3bf77ce060c01b6105eb565b60007f00000000000000000000000000000000000000000000000000000000000000008460405161026690610741565b610271929190610ac5565b604051809103906000f08015801561028d573d6000803e3d6000fd5b5090506102a467de2543242ef1b6b860c01b6105eb565b8060016000600454815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061030c679cc50e33151065be60c01b6105eb565b600454600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506103666735f7504f7cd8b2fd60c01b6105eb565b6004600081548092919061037990610b24565b919050555061039267a1f1b29283dad69760c01b6105eb565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906103e290610b24565b91905055506103fb678d276a5c1e98086960c01b6105eb565b61040f675cd4b6e173c218d060c01b6105eb565b8273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f535735cdac5d586cb40b3eb153bfced0b96d144cfe9b8947f5f9ed69895ae80b60405160405180910390a361047d670b6ed41cbabebd7660c01b6105eb565b610491673279d7b2370b2db060c01b6105eb565b8091505092915050565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045481565b60026020528060005260406000206000915090505481565b6105186105ee565b6105226000610675565b565b60036020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61056d6105ee565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105df5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016105d69190610971565b60405180910390fd5b6105e881610675565b50565b50565b6105f6610739565b73ffffffffffffffffffffffffffffffffffffffff1661061461053c565b73ffffffffffffffffffffffffffffffffffffffff161461067357610637610739565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161066a9190610971565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b61096080610b6d83390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107b58261076c565b810181811067ffffffffffffffff821117156107d4576107d361077d565b5b80604052505050565b60006107e761074e565b90506107f382826107ac565b919050565b600067ffffffffffffffff8211156108135761081261077d565b5b61081c8261076c565b9050602081019050919050565b82818337600083830152505050565b600061084b610846846107f8565b6107dd565b90508281526020810184848401111561086757610866610767565b5b610872848285610829565b509392505050565b600082601f83011261088f5761088e610762565b5b813561089f848260208601610838565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108d3826108a8565b9050919050565b6108e3816108c8565b81146108ee57600080fd5b50565b600081359050610900816108da565b92915050565b6000806040838503121561091d5761091c610758565b5b600083013567ffffffffffffffff81111561093b5761093a61075d565b5b6109478582860161087a565b9250506020610958858286016108f1565b9150509250929050565b61096b816108c8565b82525050565b60006020820190506109866000830184610962565b92915050565b6000819050919050565b61099f8161098c565b81146109aa57600080fd5b50565b6000813590506109bc81610996565b92915050565b6000602082840312156109d8576109d7610758565b5b60006109e6848285016109ad565b91505092915050565b6109f88161098c565b82525050565b6000602082019050610a1360008301846109ef565b92915050565b600060208284031215610a2f57610a2e610758565b5b6000610a3d848285016108f1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a80578082015181840152602081019050610a65565b60008484015250505050565b6000610a9782610a46565b610aa18185610a51565b9350610ab1818560208601610a62565b610aba8161076c565b840191505092915050565b6000604082019050610ada6000830185610962565b8181036020830152610aec8184610a8c565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b2f8261098c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b6157610b60610af5565b5b60018201905091905056fe60a060405260405161096038038061096083398181016040528101906100259190610684565b610035828261007060201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050610795565b61007f8261016360201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff167f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e60405160405180910390a26000815111156101505761014a8273ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013e91906106e0565b8261030660201b60201c565b5061015f565b61015e61039060201b60201c565b5b5050565b60008173ffffffffffffffffffffffffffffffffffffffff163b036101bf57806040517f64ced0ec0000000000000000000000000000000000000000000000000000000081526004016101b6919061071c565b60405180910390fd5b806101f27fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6103cd60201b60201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a491906106e0565b905060008173ffffffffffffffffffffffffffffffffffffffff163b0361030257806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016102f9919061071c565b60405180910390fd5b5050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051610330919061077e565b600060405180830381855af49150503d806000811461036b576040519150601f19603f3d011682016040523d82523d6000602084013e610370565b606091505b50915091506103868583836103d760201b60201c565b9250505092915050565b60003411156103cb576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000819050919050565b6060826103f2576103ed8261046c60201b60201c565b610464565b6000825114801561041a575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561045c57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401610453919061071c565b60405180910390fd5b819050610465565b5b9392505050565b60008151111561047f5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104f0826104c5565b9050919050565b610500816104e5565b811461050b57600080fd5b50565b60008151905061051d816104f7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105768261052d565b810181811067ffffffffffffffff821117156105955761059461053e565b5b80604052505050565b60006105a86104b1565b90506105b4828261056d565b919050565b600067ffffffffffffffff8211156105d4576105d361053e565b5b6105dd8261052d565b9050602081019050919050565b60005b838110156106085780820151818401526020810190506105ed565b60008484015250505050565b6000610627610622846105b9565b61059e565b90508281526020810184848401111561064357610642610528565b5b61064e8482856105ea565b509392505050565b600082601f83011261066b5761066a610523565b5b815161067b848260208601610614565b91505092915050565b6000806040838503121561069b5761069a6104bb565b5b60006106a98582860161050e565b925050602083015167ffffffffffffffff8111156106ca576106c96104c0565b5b6106d685828601610656565b9150509250929050565b6000602082840312156106f6576106f56104bb565b5b60006107048482850161050e565b91505092915050565b610716816104e5565b82525050565b6000602082019050610731600083018461070d565b92915050565b600081519050919050565b600081905092915050565b600061075882610737565b6107628185610742565b93506107728185602086016105ea565b80840191505092915050565b600061078a828461074d565b915081905092915050565b6080516101b16107af600039600060c701526101b16000f3fe608060405261000c61000e565b005b61001e610019610020565b61009d565b565b600061002a6100c3565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610074573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610098919061014e565b905090565b3660008037600080366000845af43d6000803e80600081146100be573d6000f35b3d6000fd5b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061011b826100f0565b9050919050565b61012b81610110565b811461013657600080fd5b50565b60008151905061014881610122565b92915050565b600060208284031215610164576101636100eb565b5b600061017284828501610139565b9150509291505056fea264697066735822122052c1bfb7896512628f96b9dd46829d14667dafdfc9e1b9e337ee611352fb50b664736f6c634300081c0033a2646970667358221220d96519e69689730149bd3e94d0a09e7f5b685ab7bad5ba915fd914c42231df2f64736f6c634300081c0033";

type SecurityBondFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SecurityBondFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SecurityBondFactory__factory extends ContractFactory {
  constructor(...args: SecurityBondFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _beacon: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_beacon, overrides || {});
  }
  override deploy(
    _beacon: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_beacon, overrides || {}) as Promise<
      SecurityBondFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SecurityBondFactory__factory {
    return super.connect(runner) as SecurityBondFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SecurityBondFactoryInterface {
    return new Interface(_abi) as SecurityBondFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SecurityBondFactory {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SecurityBondFactory;
  }
}
