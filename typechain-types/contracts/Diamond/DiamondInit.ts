/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DiamondInitInterface extends Interface {
  getFunction(nameOrSignature: "diamondInitVersion" | "init"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DiamondInitialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "diamondInitVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, BigNumberish, string, string, string, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "diamondInitVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
}

export namespace DiamondInitializedEvent {
  export type InputTuple = [
    name: string,
    symbol: string,
    cap: BigNumberish,
    isin: string,
    instrumentType: string,
    jurisdiction: string,
    admin: AddressLike
  ];
  export type OutputTuple = [
    name: string,
    symbol: string,
    cap: bigint,
    isin: string,
    instrumentType: string,
    jurisdiction: string,
    admin: string
  ];
  export interface OutputObject {
    name: string;
    symbol: string;
    cap: bigint;
    isin: string;
    instrumentType: string;
    jurisdiction: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DiamondInit extends BaseContract {
  connect(runner?: ContractRunner | null): DiamondInit;
  waitForDeployment(): Promise<this>;

  interface: DiamondInitInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  diamondInitVersion: TypedContractMethod<[], [string], "view">;

  init: TypedContractMethod<
    [
      name: string,
      symbol: string,
      cap: BigNumberish,
      _isin: string,
      _instrumentType: string,
      _jurisdiction: string,
      admin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "diamondInitVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      cap: BigNumberish,
      _isin: string,
      _instrumentType: string,
      _jurisdiction: string,
      admin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DiamondInitialized"
  ): TypedContractEvent<
    DiamondInitializedEvent.InputTuple,
    DiamondInitializedEvent.OutputTuple,
    DiamondInitializedEvent.OutputObject
  >;

  filters: {
    "DiamondInitialized(string,string,uint256,string,string,string,address)": TypedContractEvent<
      DiamondInitializedEvent.InputTuple,
      DiamondInitializedEvent.OutputTuple,
      DiamondInitializedEvent.OutputObject
    >;
    DiamondInitialized: TypedContractEvent<
      DiamondInitializedEvent.InputTuple,
      DiamondInitializedEvent.OutputTuple,
      DiamondInitializedEvent.OutputObject
    >;
  };
}
