/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AdminFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToBlacklist"
      | "addToWhitelist"
      | "batchIsBlacklisted"
      | "batchIsWhitelisted"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isBlacklisted"
      | "isWhitelisted"
      | "pause"
      | "paused"
      | "removeFromBlacklist"
      | "removeFromWhitelist"
      | "revokeRole"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlacklistAdded"
      | "BlacklistRemoved"
      | "Paused"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "WhitelistAdded"
      | "WhitelistRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToBlacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchIsBlacklisted",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchIsWhitelisted",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromBlacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchIsBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchIsWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BlacklistAddedEvent {
  export type InputTuple = [account: AddressLike, admin: AddressLike];
  export type OutputTuple = [account: string, admin: string];
  export interface OutputObject {
    account: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlacklistRemovedEvent {
  export type InputTuple = [account: AddressLike, admin: AddressLike];
  export type OutputTuple = [account: string, admin: string];
  export interface OutputObject {
    account: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistAddedEvent {
  export type InputTuple = [account: AddressLike, admin: AddressLike];
  export type OutputTuple = [account: string, admin: string];
  export interface OutputObject {
    account: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistRemovedEvent {
  export type InputTuple = [account: AddressLike, admin: AddressLike];
  export type OutputTuple = [account: string, admin: string];
  export interface OutputObject {
    account: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AdminFacet extends BaseContract {
  connect(runner?: ContractRunner | null): AdminFacet;
  waitForDeployment(): Promise<this>;

  interface: AdminFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToBlacklist: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  addToWhitelist: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  batchIsBlacklisted: TypedContractMethod<
    [accounts: AddressLike[]],
    [boolean[]],
    "view"
  >;

  batchIsWhitelisted: TypedContractMethod<
    [accounts: AddressLike[]],
    [boolean[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isBlacklisted: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isWhitelisted: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeFromBlacklist: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeFromWhitelist: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToBlacklist"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addToWhitelist"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchIsBlacklisted"
  ): TypedContractMethod<[accounts: AddressLike[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "batchIsWhitelisted"
  ): TypedContractMethod<[accounts: AddressLike[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBlacklisted"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeFromBlacklist"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFromWhitelist"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BlacklistAdded"
  ): TypedContractEvent<
    BlacklistAddedEvent.InputTuple,
    BlacklistAddedEvent.OutputTuple,
    BlacklistAddedEvent.OutputObject
  >;
  getEvent(
    key: "BlacklistRemoved"
  ): TypedContractEvent<
    BlacklistRemovedEvent.InputTuple,
    BlacklistRemovedEvent.OutputTuple,
    BlacklistRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistAdded"
  ): TypedContractEvent<
    WhitelistAddedEvent.InputTuple,
    WhitelistAddedEvent.OutputTuple,
    WhitelistAddedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistRemoved"
  ): TypedContractEvent<
    WhitelistRemovedEvent.InputTuple,
    WhitelistRemovedEvent.OutputTuple,
    WhitelistRemovedEvent.OutputObject
  >;

  filters: {
    "BlacklistAdded(address,address)": TypedContractEvent<
      BlacklistAddedEvent.InputTuple,
      BlacklistAddedEvent.OutputTuple,
      BlacklistAddedEvent.OutputObject
    >;
    BlacklistAdded: TypedContractEvent<
      BlacklistAddedEvent.InputTuple,
      BlacklistAddedEvent.OutputTuple,
      BlacklistAddedEvent.OutputObject
    >;

    "BlacklistRemoved(address,address)": TypedContractEvent<
      BlacklistRemovedEvent.InputTuple,
      BlacklistRemovedEvent.OutputTuple,
      BlacklistRemovedEvent.OutputObject
    >;
    BlacklistRemoved: TypedContractEvent<
      BlacklistRemovedEvent.InputTuple,
      BlacklistRemovedEvent.OutputTuple,
      BlacklistRemovedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WhitelistAdded(address,address)": TypedContractEvent<
      WhitelistAddedEvent.InputTuple,
      WhitelistAddedEvent.OutputTuple,
      WhitelistAddedEvent.OutputObject
    >;
    WhitelistAdded: TypedContractEvent<
      WhitelistAddedEvent.InputTuple,
      WhitelistAddedEvent.OutputTuple,
      WhitelistAddedEvent.OutputObject
    >;

    "WhitelistRemoved(address,address)": TypedContractEvent<
      WhitelistRemovedEvent.InputTuple,
      WhitelistRemovedEvent.OutputTuple,
      WhitelistRemovedEvent.OutputObject
    >;
    WhitelistRemoved: TypedContractEvent<
      WhitelistRemovedEvent.InputTuple,
      WhitelistRemovedEvent.OutputTuple,
      WhitelistRemovedEvent.OutputObject
    >;
  };
}
