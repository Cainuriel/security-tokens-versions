/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: AddressLike;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [
    facetAddress: string,
    functionSelectors: string[]
  ] & { facetAddress: string; functionSelectors: string[] };
}

export interface DiamondLoupeFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "diamondLoupeFacetVersion"
      | "facetAddress"
      | "facetAddresses"
      | "facetCount"
      | "facetExists"
      | "facetFunctionSelectors"
      | "facets"
      | "functionExists"
      | "getDiamondInfo"
      | "supportsInterface"
      | "totalFunctionSelectors"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "diamondLoupeFacetVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetExists",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "functionExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiamondInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFunctionSelectors",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "diamondLoupeFacetVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facetCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "functionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiamondInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFunctionSelectors",
    data: BytesLike
  ): Result;
}

export interface DiamondLoupeFacet extends BaseContract {
  connect(runner?: ContractRunner | null): DiamondLoupeFacet;
  waitForDeployment(): Promise<this>;

  interface: DiamondLoupeFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  diamondLoupeFacetVersion: TypedContractMethod<[], [string], "view">;

  facetAddress: TypedContractMethod<
    [_functionSelector: BytesLike],
    [string],
    "view"
  >;

  facetAddresses: TypedContractMethod<[], [string[]], "view">;

  facetCount: TypedContractMethod<[], [bigint], "view">;

  facetExists: TypedContractMethod<[_facet: AddressLike], [boolean], "view">;

  facetFunctionSelectors: TypedContractMethod<
    [_facet: AddressLike],
    [string[]],
    "view"
  >;

  facets: TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;

  functionExists: TypedContractMethod<
    [_functionSelector: BytesLike],
    [boolean],
    "view"
  >;

  getDiamondInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, string[]] & {
        facetCount_: bigint;
        functionCount: bigint;
        facetAddresses_: string[];
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalFunctionSelectors: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "diamondLoupeFacetVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddress"
  ): TypedContractMethod<[_functionSelector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "facetExists"
  ): TypedContractMethod<[_facet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectors"
  ): TypedContractMethod<[_facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facets"
  ): TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "functionExists"
  ): TypedContractMethod<[_functionSelector: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getDiamondInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string[]] & {
        facetCount_: bigint;
        functionCount: bigint;
        facetAddresses_: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalFunctionSelectors"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
