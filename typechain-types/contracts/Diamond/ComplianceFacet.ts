/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LibSecurityToken {
  export type TransactionRecordStruct = {
    id: BigNumberish;
    from: AddressLike;
    to: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type TransactionRecordStructOutput = [
    id: bigint,
    from: string,
    to: string,
    amount: bigint,
    timestamp: bigint
  ] & {
    id: bigint;
    from: string;
    to: string;
    amount: bigint;
    timestamp: bigint;
  };
}

export interface ComplianceFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MINTER_ROLE"
      | "PAUSER_ROLE"
      | "cap"
      | "getTransactionRecord"
      | "instrumentType"
      | "isin"
      | "jurisdiction"
      | "revertTransaction"
      | "transactionCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransactionRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "instrumentType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "jurisdiction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instrumentType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jurisdiction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
}

export interface ComplianceFacet extends BaseContract {
  connect(runner?: ContractRunner | null): ComplianceFacet;
  waitForDeployment(): Promise<this>;

  interface: ComplianceFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  cap: TypedContractMethod<[], [bigint], "view">;

  getTransactionRecord: TypedContractMethod<
    [id: BigNumberish],
    [LibSecurityToken.TransactionRecordStructOutput],
    "view"
  >;

  instrumentType: TypedContractMethod<[], [string], "view">;

  isin: TypedContractMethod<[], [string], "view">;

  jurisdiction: TypedContractMethod<[], [string], "view">;

  revertTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transactionCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransactionRecord"
  ): TypedContractMethod<
    [id: BigNumberish],
    [LibSecurityToken.TransactionRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "instrumentType"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "jurisdiction"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revertTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transactionCount"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
