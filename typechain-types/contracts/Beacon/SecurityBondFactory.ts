/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SecurityBondFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "beacon"
      | "createBond"
      | "deployedBonds"
      | "getAllBonds"
      | "getBondByIndex"
      | "getBondIndex"
      | "getBondsCountByBeneficiary"
      | "getBondsPaginated"
      | "indexOfDeployedBonds"
      | "isBondCreatedByFactory"
      | "owner"
      | "renounceOwnership"
      | "totalOfBondsCreated"
      | "totalOfBondsCreatedByBeneficiary"
      | "transferOwnership"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BondCreated" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "beacon", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createBond",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedBonds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBonds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBondByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondsCountByBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondsPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexOfDeployedBonds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBondCreatedByFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalOfBondsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalOfBondsCreatedByBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "beacon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployedBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondsCountByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexOfDeployedBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBondCreatedByFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOfBondsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOfBondsCreatedByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace BondCreatedEvent {
  export type InputTuple = [
    bondProxy: AddressLike,
    beneficiary: AddressLike,
    bondIndex: BigNumberish
  ];
  export type OutputTuple = [
    bondProxy: string,
    beneficiary: string,
    bondIndex: bigint
  ];
  export interface OutputObject {
    bondProxy: string;
    beneficiary: string;
    bondIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecurityBondFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SecurityBondFactory;
  waitForDeployment(): Promise<this>;

  interface: SecurityBondFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  beacon: TypedContractMethod<[], [string], "view">;

  createBond: TypedContractMethod<
    [initData: BytesLike, beneficiary: AddressLike],
    [string],
    "nonpayable"
  >;

  deployedBonds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getAllBonds: TypedContractMethod<[], [string[]], "view">;

  getBondByIndex: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getBondIndex: TypedContractMethod<
    [bondAddress: AddressLike],
    [bigint],
    "view"
  >;

  getBondsCountByBeneficiary: TypedContractMethod<
    [beneficiary: AddressLike],
    [bigint],
    "view"
  >;

  getBondsPaginated: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [[string[], bigint] & { bonds: string[]; total: bigint }],
    "view"
  >;

  indexOfDeployedBonds: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  isBondCreatedByFactory: TypedContractMethod<
    [bondAddress: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalOfBondsCreated: TypedContractMethod<[], [bigint], "view">;

  totalOfBondsCreatedByBeneficiary: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "beacon"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createBond"
  ): TypedContractMethod<
    [initData: BytesLike, beneficiary: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedBonds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllBonds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBondByIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBondIndex"
  ): TypedContractMethod<[bondAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBondsCountByBeneficiary"
  ): TypedContractMethod<[beneficiary: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBondsPaginated"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [[string[], bigint] & { bonds: string[]; total: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "indexOfDeployedBonds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isBondCreatedByFactory"
  ): TypedContractMethod<[bondAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalOfBondsCreated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalOfBondsCreatedByBeneficiary"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BondCreated"
  ): TypedContractEvent<
    BondCreatedEvent.InputTuple,
    BondCreatedEvent.OutputTuple,
    BondCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BondCreated(address,address,uint256)": TypedContractEvent<
      BondCreatedEvent.InputTuple,
      BondCreatedEvent.OutputTuple,
      BondCreatedEvent.OutputObject
    >;
    BondCreated: TypedContractEvent<
      BondCreatedEvent.InputTuple,
      BondCreatedEvent.OutputTuple,
      BondCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
